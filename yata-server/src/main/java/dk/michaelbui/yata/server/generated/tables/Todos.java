/*
 * This file is generated by jOOQ.
 */
package generated.tables;


import generated.DefaultSchema;
import generated.Keys;
import generated.tables.FolderTodos.FolderTodosPath;
import generated.tables.Folders.FoldersPath;
import generated.tables.Notes.NotesPath;
import generated.tables.Tags.TagsPath;
import generated.tables.TodoTags.TodoTagsPath;
import generated.tables.records.TodosRecord;

import java.util.Collection;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Todos extends TableImpl<TodosRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>todos</code>
     */
    public static final Todos TODOS = new Todos();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TodosRecord> getRecordType() {
        return TodosRecord.class;
    }

    /**
     * The column <code>todos.id</code>.
     */
    public final TableField<TodosRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.identity(true), this, "");

    /**
     * The column <code>todos.title</code>.
     */
    public final TableField<TodosRecord, String> TITLE = createField(DSL.name("title"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>todos.description</code>.
     */
    public final TableField<TodosRecord, String> DESCRIPTION = createField(DSL.name("description"), SQLDataType.CLOB.defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.CLOB)), this, "");

    /**
     * The column <code>todos.completed</code>.
     */
    public final TableField<TodosRecord, Boolean> COMPLETED = createField(DSL.name("completed"), SQLDataType.BOOLEAN.defaultValue(DSL.field(DSL.raw("FALSE"), SQLDataType.BOOLEAN)), this, "");

    /**
     * The column <code>todos.creation_date</code>.
     */
    public final TableField<TodosRecord, String> CREATION_DATE = createField(DSL.name("creation_date"), SQLDataType.CLOB.defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.CLOB)), this, "");

    /**
     * The column <code>todos.time_logged</code>.
     */
    public final TableField<TodosRecord, Integer> TIME_LOGGED = createField(DSL.name("time_logged"), SQLDataType.INTEGER.defaultValue(DSL.field(DSL.raw("0"), SQLDataType.INTEGER)), this, "");

    private Todos(Name alias, Table<TodosRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private Todos(Name alias, Table<TodosRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>todos</code> table reference
     */
    public Todos(String alias) {
        this(DSL.name(alias), TODOS);
    }

    /**
     * Create an aliased <code>todos</code> table reference
     */
    public Todos(Name alias) {
        this(alias, TODOS);
    }

    /**
     * Create a <code>todos</code> table reference
     */
    public Todos() {
        this(DSL.name("todos"), null);
    }

    public <O extends Record> Todos(Table<O> path, ForeignKey<O, TodosRecord> childPath, InverseForeignKey<O, TodosRecord> parentPath) {
        super(path, childPath, parentPath, TODOS);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class TodosPath extends Todos implements Path<TodosRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> TodosPath(Table<O> path, ForeignKey<O, TodosRecord> childPath, InverseForeignKey<O, TodosRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private TodosPath(Name alias, Table<TodosRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public TodosPath as(String alias) {
            return new TodosPath(DSL.name(alias), this);
        }

        @Override
        public TodosPath as(Name alias) {
            return new TodosPath(alias, this);
        }

        @Override
        public TodosPath as(Table<?> alias) {
            return new TodosPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public Identity<TodosRecord, Integer> getIdentity() {
        return (Identity<TodosRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<TodosRecord> getPrimaryKey() {
        return Keys.TODOS__PK_TODOS;
    }

    private transient FolderTodosPath _folderTodos;

    /**
     * Get the implicit to-many join path to the <code>folder_todos</code> table
     */
    public FolderTodosPath folderTodos() {
        if (_folderTodos == null)
            _folderTodos = new FolderTodosPath(this, null, Keys.FOLDER_TODOS__FK_FOLDER_TODOS_PK_TODOS.getInverseKey());

        return _folderTodos;
    }

    private transient NotesPath _notes;

    /**
     * Get the implicit to-many join path to the <code>notes</code> table
     */
    public NotesPath notes() {
        if (_notes == null)
            _notes = new NotesPath(this, null, Keys.NOTES__FK_NOTES_PK_TODOS.getInverseKey());

        return _notes;
    }

    private transient TodoTagsPath _todoTags;

    /**
     * Get the implicit to-many join path to the <code>todo_tags</code> table
     */
    public TodoTagsPath todoTags() {
        if (_todoTags == null)
            _todoTags = new TodoTagsPath(this, null, Keys.TODO_TAGS__FK_TODO_TAGS_PK_TODOS.getInverseKey());

        return _todoTags;
    }

    /**
     * Get the implicit many-to-many join path to the <code>folders</code> table
     */
    public FoldersPath folders() {
        return folderTodos().folders();
    }

    /**
     * Get the implicit many-to-many join path to the <code>tags</code> table
     */
    public TagsPath tags() {
        return todoTags().tags();
    }

    @Override
    public Todos as(String alias) {
        return new Todos(DSL.name(alias), this);
    }

    @Override
    public Todos as(Name alias) {
        return new Todos(alias, this);
    }

    @Override
    public Todos as(Table<?> alias) {
        return new Todos(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Todos rename(String name) {
        return new Todos(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Todos rename(Name name) {
        return new Todos(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Todos rename(Table<?> name) {
        return new Todos(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Todos where(Condition condition) {
        return new Todos(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Todos where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Todos where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Todos where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Todos where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Todos where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Todos where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Todos where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Todos whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Todos whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
