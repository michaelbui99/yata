/*
 * This file is generated by jOOQ.
 */
package generated.tables;


import generated.DefaultSchema;
import generated.Keys;
import generated.tables.Tags.TagsPath;
import generated.tables.Todos.TodosPath;
import generated.tables.records.TodoTagsRecord;

import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class TodoTags extends TableImpl<TodoTagsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>todo_tags</code>
     */
    public static final TodoTags TODO_TAGS = new TodoTags();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TodoTagsRecord> getRecordType() {
        return TodoTagsRecord.class;
    }

    /**
     * The column <code>todo_tags.tag_name</code>.
     */
    public final TableField<TodoTagsRecord, String> TAG_NAME = createField(DSL.name("tag_name"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>todo_tags.todo_id</code>.
     */
    public final TableField<TodoTagsRecord, Integer> TODO_ID = createField(DSL.name("todo_id"), SQLDataType.INTEGER, this, "");

    private TodoTags(Name alias, Table<TodoTagsRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private TodoTags(Name alias, Table<TodoTagsRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>todo_tags</code> table reference
     */
    public TodoTags(String alias) {
        this(DSL.name(alias), TODO_TAGS);
    }

    /**
     * Create an aliased <code>todo_tags</code> table reference
     */
    public TodoTags(Name alias) {
        this(alias, TODO_TAGS);
    }

    /**
     * Create a <code>todo_tags</code> table reference
     */
    public TodoTags() {
        this(DSL.name("todo_tags"), null);
    }

    public <O extends Record> TodoTags(Table<O> path, ForeignKey<O, TodoTagsRecord> childPath, InverseForeignKey<O, TodoTagsRecord> parentPath) {
        super(path, childPath, parentPath, TODO_TAGS);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class TodoTagsPath extends TodoTags implements Path<TodoTagsRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> TodoTagsPath(Table<O> path, ForeignKey<O, TodoTagsRecord> childPath, InverseForeignKey<O, TodoTagsRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private TodoTagsPath(Name alias, Table<TodoTagsRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public TodoTagsPath as(String alias) {
            return new TodoTagsPath(DSL.name(alias), this);
        }

        @Override
        public TodoTagsPath as(Name alias) {
            return new TodoTagsPath(alias, this);
        }

        @Override
        public TodoTagsPath as(Table<?> alias) {
            return new TodoTagsPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public UniqueKey<TodoTagsRecord> getPrimaryKey() {
        return Keys.TODO_TAGS__PK_TODO_TAGS;
    }

    @Override
    public List<ForeignKey<TodoTagsRecord, ?>> getReferences() {
        return Arrays.asList(Keys.TODO_TAGS__FK_TODO_TAGS_PK_TAGS, Keys.TODO_TAGS__FK_TODO_TAGS_PK_TODOS);
    }

    private transient TagsPath _tags;

    /**
     * Get the implicit join path to the <code>tags</code> table.
     */
    public TagsPath tags() {
        if (_tags == null)
            _tags = new TagsPath(this, Keys.TODO_TAGS__FK_TODO_TAGS_PK_TAGS, null);

        return _tags;
    }

    private transient TodosPath _todos;

    /**
     * Get the implicit join path to the <code>todos</code> table.
     */
    public TodosPath todos() {
        if (_todos == null)
            _todos = new TodosPath(this, Keys.TODO_TAGS__FK_TODO_TAGS_PK_TODOS, null);

        return _todos;
    }

    @Override
    public TodoTags as(String alias) {
        return new TodoTags(DSL.name(alias), this);
    }

    @Override
    public TodoTags as(Name alias) {
        return new TodoTags(alias, this);
    }

    @Override
    public TodoTags as(Table<?> alias) {
        return new TodoTags(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public TodoTags rename(String name) {
        return new TodoTags(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public TodoTags rename(Name name) {
        return new TodoTags(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public TodoTags rename(Table<?> name) {
        return new TodoTags(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public TodoTags where(Condition condition) {
        return new TodoTags(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public TodoTags where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public TodoTags where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public TodoTags where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public TodoTags where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public TodoTags where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public TodoTags where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public TodoTags where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public TodoTags whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public TodoTags whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
