/*
 * This file is generated by jOOQ.
 */
package dk.michaelbui.yata.generated.tables;


import dk.michaelbui.yata.generated.DefaultSchema;
import dk.michaelbui.yata.generated.Keys;
import dk.michaelbui.yata.generated.tables.FolderTodos.FolderTodosPath;
import dk.michaelbui.yata.generated.tables.Todos.TodosPath;
import dk.michaelbui.yata.generated.tables.records.FoldersRecord;

import java.util.Collection;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Folders extends TableImpl<FoldersRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>folders</code>
     */
    public static final Folders FOLDERS = new Folders();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<FoldersRecord> getRecordType() {
        return FoldersRecord.class;
    }

    /**
     * The column <code>folders.id</code>.
     */
    public final TableField<FoldersRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.identity(true), this, "");

    /**
     * The column <code>folders.name</code>.
     */
    public final TableField<FoldersRecord, String> NAME = createField(DSL.name("name"), SQLDataType.CLOB.nullable(false), this, "");

    private Folders(Name alias, Table<FoldersRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private Folders(Name alias, Table<FoldersRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>folders</code> table reference
     */
    public Folders(String alias) {
        this(DSL.name(alias), FOLDERS);
    }

    /**
     * Create an aliased <code>folders</code> table reference
     */
    public Folders(Name alias) {
        this(alias, FOLDERS);
    }

    /**
     * Create a <code>folders</code> table reference
     */
    public Folders() {
        this(DSL.name("folders"), null);
    }

    public <O extends Record> Folders(Table<O> path, ForeignKey<O, FoldersRecord> childPath, InverseForeignKey<O, FoldersRecord> parentPath) {
        super(path, childPath, parentPath, FOLDERS);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class FoldersPath extends Folders implements Path<FoldersRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> FoldersPath(Table<O> path, ForeignKey<O, FoldersRecord> childPath, InverseForeignKey<O, FoldersRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private FoldersPath(Name alias, Table<FoldersRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public FoldersPath as(String alias) {
            return new FoldersPath(DSL.name(alias), this);
        }

        @Override
        public FoldersPath as(Name alias) {
            return new FoldersPath(alias, this);
        }

        @Override
        public FoldersPath as(Table<?> alias) {
            return new FoldersPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public Identity<FoldersRecord, Integer> getIdentity() {
        return (Identity<FoldersRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<FoldersRecord> getPrimaryKey() {
        return Keys.FOLDERS__PK_FOLDERS;
    }

    private transient FolderTodosPath _folderTodos;

    /**
     * Get the implicit to-many join path to the <code>folder_todos</code> table
     */
    public FolderTodosPath folderTodos() {
        if (_folderTodos == null)
            _folderTodos = new FolderTodosPath(this, null, Keys.FOLDER_TODOS__FK_FOLDER_TODOS_PK_FOLDERS.getInverseKey());

        return _folderTodos;
    }

    /**
     * Get the implicit many-to-many join path to the <code>todos</code> table
     */
    public TodosPath todos() {
        return folderTodos().todos();
    }

    @Override
    public Folders as(String alias) {
        return new Folders(DSL.name(alias), this);
    }

    @Override
    public Folders as(Name alias) {
        return new Folders(alias, this);
    }

    @Override
    public Folders as(Table<?> alias) {
        return new Folders(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Folders rename(String name) {
        return new Folders(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Folders rename(Name name) {
        return new Folders(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Folders rename(Table<?> name) {
        return new Folders(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Folders where(Condition condition) {
        return new Folders(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Folders where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Folders where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Folders where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Folders where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Folders where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Folders where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Folders where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Folders whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Folders whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
