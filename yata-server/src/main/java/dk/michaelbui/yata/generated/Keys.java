/*
 * This file is generated by jOOQ.
 */
package dk.michaelbui.yata.generated;


import dk.michaelbui.yata.generated.tables.FlywaySchemaHistory;
import dk.michaelbui.yata.generated.tables.FolderTodos;
import dk.michaelbui.yata.generated.tables.Folders;
import dk.michaelbui.yata.generated.tables.Notes;
import dk.michaelbui.yata.generated.tables.Tags;
import dk.michaelbui.yata.generated.tables.TodoTags;
import dk.michaelbui.yata.generated.tables.Todos;
import dk.michaelbui.yata.generated.tables.records.FlywaySchemaHistoryRecord;
import dk.michaelbui.yata.generated.tables.records.FolderTodosRecord;
import dk.michaelbui.yata.generated.tables.records.FoldersRecord;
import dk.michaelbui.yata.generated.tables.records.NotesRecord;
import dk.michaelbui.yata.generated.tables.records.TagsRecord;
import dk.michaelbui.yata.generated.tables.records.TodoTagsRecord;
import dk.michaelbui.yata.generated.tables.records.TodosRecord;

import org.jooq.ForeignKey;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.Internal;
import org.jooq.impl.QOM.ForeignKeyRule;


/**
 * A class modelling foreign key relationships and constraints of tables in the
 * default schema.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Keys {

    // -------------------------------------------------------------------------
    // UNIQUE and PRIMARY KEY definitions
    // -------------------------------------------------------------------------

    public static final UniqueKey<FlywaySchemaHistoryRecord> FLYWAY_SCHEMA_HISTORY__PK_FLYWAY_SCHEMA_HISTORY = Internal.createUniqueKey(FlywaySchemaHistory.FLYWAY_SCHEMA_HISTORY, DSL.name("pk_flyway_schema_history"), new TableField[] { FlywaySchemaHistory.FLYWAY_SCHEMA_HISTORY.INSTALLED_RANK }, true);
    public static final UniqueKey<FolderTodosRecord> FOLDER_TODOS__PK_FOLDER_TODOS = Internal.createUniqueKey(FolderTodos.FOLDER_TODOS, DSL.name("pk_folder_todos"), new TableField[] { FolderTodos.FOLDER_TODOS.FOLDER_ID, FolderTodos.FOLDER_TODOS.TODO_ID }, true);
    public static final UniqueKey<FoldersRecord> FOLDERS__PK_FOLDERS = Internal.createUniqueKey(Folders.FOLDERS, DSL.name("pk_folders"), new TableField[] { Folders.FOLDERS.ID }, true);
    public static final UniqueKey<NotesRecord> NOTES__PK_NOTES = Internal.createUniqueKey(Notes.NOTES, DSL.name("pk_notes"), new TableField[] { Notes.NOTES.ID }, true);
    public static final UniqueKey<TagsRecord> TAGS__PK_TAGS = Internal.createUniqueKey(Tags.TAGS, DSL.name("pk_tags"), new TableField[] { Tags.TAGS.NAME }, true);
    public static final UniqueKey<TodoTagsRecord> TODO_TAGS__PK_TODO_TAGS = Internal.createUniqueKey(TodoTags.TODO_TAGS, DSL.name("pk_todo_tags"), new TableField[] { TodoTags.TODO_TAGS.TAG_NAME, TodoTags.TODO_TAGS.TODO_ID }, true);
    public static final UniqueKey<TodosRecord> TODOS__PK_TODOS = Internal.createUniqueKey(Todos.TODOS, DSL.name("pk_todos"), new TableField[] { Todos.TODOS.ID }, true);

    // -------------------------------------------------------------------------
    // FOREIGN KEY definitions
    // -------------------------------------------------------------------------

    public static final ForeignKey<FolderTodosRecord, FoldersRecord> FOLDER_TODOS__FK_FOLDER_TODOS_PK_FOLDERS = Internal.createForeignKey(FolderTodos.FOLDER_TODOS, DSL.name("fk_folder_todos_pk_folders"), new TableField[] { FolderTodos.FOLDER_TODOS.FOLDER_ID }, Keys.FOLDERS__PK_FOLDERS, new TableField[] { Folders.FOLDERS.ID }, true, ForeignKeyRule.NO_ACTION, ForeignKeyRule.NO_ACTION);
    public static final ForeignKey<FolderTodosRecord, TodosRecord> FOLDER_TODOS__FK_FOLDER_TODOS_PK_TODOS = Internal.createForeignKey(FolderTodos.FOLDER_TODOS, DSL.name("fk_folder_todos_pk_todos"), new TableField[] { FolderTodos.FOLDER_TODOS.TODO_ID }, Keys.TODOS__PK_TODOS, new TableField[] { Todos.TODOS.ID }, true, ForeignKeyRule.NO_ACTION, ForeignKeyRule.NO_ACTION);
    public static final ForeignKey<NotesRecord, TodosRecord> NOTES__FK_NOTES_PK_TODOS = Internal.createForeignKey(Notes.NOTES, DSL.name("fk_notes_pk_todos"), new TableField[] { Notes.NOTES.TODO_ID }, Keys.TODOS__PK_TODOS, new TableField[] { Todos.TODOS.ID }, true, ForeignKeyRule.NO_ACTION, ForeignKeyRule.NO_ACTION);
    public static final ForeignKey<TodoTagsRecord, TagsRecord> TODO_TAGS__FK_TODO_TAGS_PK_TAGS = Internal.createForeignKey(TodoTags.TODO_TAGS, DSL.name("fk_todo_tags_pk_tags"), new TableField[] { TodoTags.TODO_TAGS.TAG_NAME }, Keys.TAGS__PK_TAGS, new TableField[] { Tags.TAGS.NAME }, true, ForeignKeyRule.NO_ACTION, ForeignKeyRule.NO_ACTION);
    public static final ForeignKey<TodoTagsRecord, TodosRecord> TODO_TAGS__FK_TODO_TAGS_PK_TODOS = Internal.createForeignKey(TodoTags.TODO_TAGS, DSL.name("fk_todo_tags_pk_todos"), new TableField[] { TodoTags.TODO_TAGS.TODO_ID }, Keys.TODOS__PK_TODOS, new TableField[] { Todos.TODOS.ID }, true, ForeignKeyRule.NO_ACTION, ForeignKeyRule.NO_ACTION);
}
